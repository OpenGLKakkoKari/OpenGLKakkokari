/******************************************************************************
/*!
@file   Timer.cpp
@author Yuki Kogawara
@copy   Copyright(C) 2016 Yuki Kogawara

******************************************************************************/

/*  インクルード
******************************************************************************/


#include "Timer.h"
#include "GameScene.h"
#include "../Framework/Manager.h"


using namespace Game;
using namespace Framework;


/*  実装
******************************************************************************/

/******************************************************************************
@brief  コンストラクタ
******************************************************************************/

Timer::Timer()
{
	for ( int nCnt = 0 ; nCnt < DIGIT_MAX ; nCnt++ )
	{
		pSprite[nCnt] = NULL ;
	}

}

/******************************************************************************
@brief  デストラクタ
******************************************************************************/

Timer::~Timer()
{
	for ( int nCnt = 0 ; nCnt < DIGIT_MAX ; nCnt++ )
	{
		SAFE_DELETE(pSprite[nCnt]);
	}
}

/******************************************************************************
@brief  初期化処理
******************************************************************************/

void Timer::Init(void)
{
	time_ = TIME ;
	timeCnt_ = 0 ;

	for ( int nCnt = 0 ; nCnt < DIGIT_MAX ; nCnt++ )
	{
		pSprite[nCnt] = NumberSprite::Create(
			// 座標
			Vector2(((float)Manager::GetWindow()->GetWidth() / 16 * 8) + 50.0f - ( nCnt*100.0f), 100.0f),
			// 大きさ
			Vector2(100.0f, 100.0f),
			// 色
			Color(255, 255, 255, 255),
			// テクスチャファイル名
			"data/TEXTURE/number.png",
			// 番号
			0);
	}

}

/******************************************************************************
@brief  更新処理
******************************************************************************/

void Timer::Update(void)
{
	int time ;

	//60フレーム毎に入る
	if ( timeCnt_ >= 60 )
	{
		//タイムマイナス
		time_ -- ;

		//タイムがマイナスになると
		if ( time_ < 0 )
		{
			time_ = 0 ;
		}
		timeCnt_ = 0;
	}

	timeCnt_ ++ ;

	//今のタイムを保存
	time = time_ ;

	for ( int nCnt = 0 ; nCnt < DIGIT_MAX ; nCnt++ )
	{
		//一桁目を算出していれる
		pSprite[nCnt] ->SetNumber(time % 10) ;

		//桁を一つ減らす
		time = time / 10 ;
	}
}

/******************************** 実装ここまで *******************************/
