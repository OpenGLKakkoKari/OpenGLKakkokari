/*****************************************************************************/
/*!
@file   Score.cpp
@author Yuki Kogawara
@editor Daisuke Yokoyama -> 2016/12/5
@copy   Copyright(C) 2016 Yuki Kogawara

******************************************************************************/

/*  インクルード
******************************************************************************/


#include "Score.h"
#include <math.h>
#include "GameScene.h"
#include "../Framework/Math/Math.h"
#include "../Framework/Manager.h"


using namespace Framework;
using namespace Framework::Math;
using namespace Game;


/*  実装
******************************************************************************/
#define SOCRE_LIMIT	(999)

/******************************************************************************
@brief  コンストラクタ
******************************************************************************/

Score::Score()
{
	for (int nCnt = 0; nCnt < DIGIT_MAX; nCnt++)
	{
		pSprite[nCnt] = NULL;
	}

}

/******************************************************************************
@brief  デストラクタ
******************************************************************************/

Score::~Score()
{
	for (int nCnt = 0; nCnt < DIGIT_MAX; nCnt++)
	{
		SAFE_DELETE(pSprite[nCnt]);
	}
}

/******************************************************************************
@brief  初期化処理
******************************************************************************/

void Score::Init(void)
{
	m_score = SCORE;

	for (int nCnt = 0; nCnt < DIGIT_MAX; nCnt++)
	{
		pSprite[nCnt] = NumberSprite::Create(
			// 座標
			Vector2(1000.0f + nCnt*80.0f, 80.0f),
			// 大きさ
			Vector2(80.0f, 80.0f),
			// 色
			Color(255, 255, 255, 255),
			// テクスチャファイル名
			"data/TEXTURE/number.png",
			// 番号
			0);
	}

}

/******************************************************************************
@brief  更新処理
******************************************************************************/

void Score::Update(void)
{
	//加算テスト
	if (Manager::GetKeyboard()->Trigger('P'))
	{
		AddScore(10);
	}
}


/******************************************************************************
@brief  スコア加算処理
******************************************************************************/
void Game::Score::AddScore(int add)
{
	//スコア加算
	m_score += add;
	if (m_score > SOCRE_LIMIT) {
		m_score = SOCRE_LIMIT;//限界地処理
	}

	//今のスコアを保存
	int score = m_score;

	//表示するための計算
	for (int nCnt = DIGIT_MAX-1; nCnt >= 0; nCnt--)
	{
		//上位桁から算出していれる
		pSprite[nCnt]->SetNumber(score % 10);

		//桁を一つ減らす
		score = score / 10;
	}
}


/******************************************************************************
@brief  スコア加算処理
******************************************************************************/
float Game::Score::GetScore(void)
{
	return m_score;//スコアの値を返す
}

/******************************** 実装ここまで *******************************/
