/*****************************************************************************/
/*!
@file   File.cpp
@author Yuki Kogawara
@copy   Copyright(C) 2016 Yuki Kogawara

******************************************************************************/

/*  インクルード
******************************************************************************/


#include "File.h"
using Framework::File::File;


/*  実装
******************************************************************************/

/******************************************************************************
@brief  コンストラクタ
@param  FilePath    ファイルパス
@param  Mode        モード
******************************************************************************/


File::File(const char *FilePath, const char *Mode)
{
    Open(FilePath, Mode);
}

/******************************************************************************
@brief  デストラクタ
******************************************************************************/

File::~File()
{
    if (fp != nullptr)
    {
        Close();
    }
}

/******************************************************************************
@brief  ファイルを開く
@param  FilePath    ファイルパス
@param  Mode        モード
@retval true        成功
@retval false       失敗
******************************************************************************/

bool File::Open(const char *FilePath, const char *Mode)
{
    fopen_s(&fp, FilePath, Mode);
    return (fp) ? (true) : (false);
}

/******************************************************************************
@brief  ファイルを閉じる
******************************************************************************/

void File::Close()
{
    fclose(fp);
}

/******************************************************************************
@brief  ファイルサイズ取得
@return int         ファイルサイズ
******************************************************************************/

int File::GetSize()
{
    fpos_t pos;
    fgetpos(fp, &pos);
    fseek(fp, 0, SEEK_END);
    int size = ftell(fp);
    fsetpos(fp, &pos);

    return size;
}

/******************************************************************************
@brief  ファイルポインタ移動
@param  offset      オフセット
@param  origin      起点
******************************************************************************/

void File::Seek(int offset, int origin)
{
    fseek(fp, offset, origin);
}

/******************************************************************************
@brief  1バイト読み込み
@return unsigned char   取得したバイト
******************************************************************************/

unsigned char File::GetByte()
{
    return fgetc(fp);
}

/******************************************************************************
@brief  1バイト書き込み
@param  c               書き込むバイト
******************************************************************************/

void File::SetByte(unsigned char c)
{
    fgetc(fp);
}

/******************************************************************************
@brief  1行読み込み
@param  Dest            読み込み先
@param  maxSize         1行の最大文字数
******************************************************************************/

void File::GetLine(char* Dest)
{
    fgets(Dest, 256, fp);
}
void File::GetLine(char* Dest, int maxSize)
{
    fgets(Dest, maxSize, fp);
}

/******************************************************************************
@brief  1行書き込み
@param  Src             書き込み先
******************************************************************************/

void File::SetLine(const char* Src)
{
    fputs(Src, fp);
}

/******************************************************************************
@brief  ブロック読み込み
@param  Dest            読み込み先
@param  size            サイズ
@param  nmemb           読み込むブロック数
******************************************************************************/

void File::Read(void *Dest, int size, int nmemb)
{
    fread(Dest, size, nmemb, fp);
}

/******************************************************************************
@brief  ブロック書き込み
@param  Src             書き込み先
@param  size            サイズ
@param  nmemb           読み込むブロック数
******************************************************************************/

void File::Write(const void *Src, int size, int nmemb)
{
    fwrite(Src, size, nmemb, fp);
}

/******************************* 関数ここまで ********************************/
