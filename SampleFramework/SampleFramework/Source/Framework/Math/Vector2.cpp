/*****************************************************************************/
/*!
@file   Vector2.cpp
@author Yuki Kogawara
@copy   Copyright(C) 2016 Yuki Kogawara

******************************************************************************/


/*  インクルード
******************************************************************************/


#include "Vector2.h"
#include <math.h>

using Framework::Vector2;


/*  実装
******************************************************************************/

/******************************************************************************
@brief  内積算出
@param  pV1         入力ベクトル1
@param  pV2         入力ベクトル2
@return float       内積
******************************************************************************/

float Vector2::Dot(const Vector2 *pV1, const Vector2 *pV2)
{
    return (pV1->x * pV2->x) + (pV1->y * pV2->y);
}

/******************************************************************************
@brief  外積算出
@param  pV1         入力ベクトル1
@param  pV2         入力ベクトル2
@return float       外積
******************************************************************************/

float Vector2::Cross(const Vector2 *pV1, const Vector2 *pV2)
{
    return (pV1->x * pV2->y) - (pV1->y * pV2->x);
}

/******************************************************************************
@brief  ベクトルの長さ算出
@param  pV          入力ベクトル
@return float       ベクトルの長さ
******************************************************************************/

float Vector2::Length(const Vector2 *pV)
{
    return sqrt( pV->x * pV->x + pV->y * pV->y);
}

/******************************************************************************
@brief  距離算出
@param  pV1         入力ベクトル1
@param  pV2         入力ベクトル2
@return float       距離
******************************************************************************/

float Vector2::Distance(const Vector2 *pV1, const Vector2 *pV2)
{
    return Vector2::Length(pV1) - Vector2::Length(pV2);
}

/******************************************************************************
@brief  ベクトルの正規化
@param  pOut        出力ベクトル
@param  pV          入力ベクトル
******************************************************************************/

Vector2 *Vector2::Normalize(Vector2 *pOut, const Vector2 *pV)
{
    *pOut = *pV / Length(pV);

    return pOut;
}

/******************************** 実装ここまで *******************************/
